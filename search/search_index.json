{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LLAISYS\uff08Let's Learn AI SYStem\uff09","text":"<p>\u672c\u9879\u76ee\u6e90\u81ea \u542f\u5143\u4eba\u5de5\u667a\u80fd\u8bad\u7ec3\u8425 \u00b7 \u5927\u6a21\u578b\u63a8\u7406\u6846\u67b6\u65b9\u5411 \u7684\u8bfe\u7a0b\u4f5c\u4e1a\uff0c\u65e8\u5728\u5e2e\u52a9\u521d\u5b66\u8005\u4ece\u96f6\u6784\u5efa\u5927\u6a21\u578b\u63a8\u7406\u7cfb\u7edf\u3002\u5f53\u524d\u7248\u672c\u5df2\u5b9e\u73b0\u57fa\u7840\u529f\u80fd\uff0c\u5e76\u4f5c\u4e3a\u65b0\u63a8\u7406\u6846\u67b6 neollm \u7684\u8bd5\u9a8c\u5e73\u53f0\uff0c\u4e3b\u8981\u7528\u4e8e\uff1a</p> <ul> <li>\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u5b50\u5b9e\u73b0\u7684\u6b63\u786e\u6027\uff08\u4e0e Hugging Face \u63a8\u7406\u7ed3\u679c\u5bf9\u9f50\uff09  </li> <li>\u8bc4\u4f30\u81ea\u5b9a\u4e49\u7b97\u5b50\u7684\u6027\u80fd</li> </ul> <p>\ud83d\udccc \u6ce8\u610f\uff1a\u672c\u9879\u76ee\u4e0d\u518d\u65b0\u589e\u529f\u80fd\uff0c\u4ec5\u7528\u4e8e\u7b97\u5b50\u5f00\u53d1\u4e0e\u6027\u80fd\u6d4b\u8bd5\u3002</p>"},{"location":"#_1","title":"\u2705 \u5f53\u524d\u5b9e\u73b0","text":"<ul> <li>\u6a21\u578b\u652f\u6301\uff1aQwen2 \u6a21\u578b\u5728 CPU \u4e0a\u7684\u5b8c\u6574\u63a8\u7406\u6d41\u7a0b\uff08\u542b KV Cache\uff09</li> <li>\u7b97\u5b50\u4f18\u5316\uff1a<ul> <li>\u4f7f\u7528 AVX \u6307\u4ee4\u96c6 \u52a0\u901f\u6838\u5fc3\u8ba1\u7b97</li> <li>\u901a\u8fc7 OpenMP \u5b9e\u73b0\u591a\u7ebf\u7a0b\u5e76\u884c</li> <li>\u9ad8\u6548\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff1a<ul> <li><code>f16 &lt;=&gt; f32</code>\uff1a\u5229\u7528 F16C \u6307\u4ee4</li> <li><code>bf16 &lt;=&gt; f32</code>\uff1a\u5229\u7528 AVX \u6307\u4ee4</li> </ul> </li> </ul> </li> </ul>"},{"location":"#_2","title":"\ud83d\ude80 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_3","title":"\u7f16\u8bd1\u4e0e\u5b89\u88c5","text":"Bash<pre><code># \u7f16\u8bd1 C++ \u540e\u7aef\nxmake\n\n# \u5b89\u88c5\u5171\u4eab\u5e93\nxmake install\n\n# \u5b89\u88c5 Python \u524d\u7aef\u5305\npip install ./python/\n</code></pre>"},{"location":"#_4","title":"\u7b97\u5b50\u6d4b\u8bd5","text":"<p>\u4ee5 <code>add</code> \u7b97\u5b50\u4e3a\u4f8b\u3002</p> Bash<pre><code># \u6b63\u786e\u6027\u6d4b\u8bd5\uff08CPU\uff09\npython test/ops/add.py\n\n# \u6b63\u786e\u6027\u6d4b\u8bd5\uff08NVIDIA GPU\uff09\npython test/ops/add.py --nvidia\n\n# \u6027\u80fd\u5206\u6790\uff08CPU\uff09\npython test/ops/add.py --profile\n\n# \u6027\u80fd\u5206\u6790\uff08NVIDIA GPU\uff09\npython test/ops/add.py --nvidia --profile\n</code></pre>"},{"location":"#_5","title":"\u63a8\u7406\u9a8c\u8bc1","text":"Bash<pre><code>python test/test_infer.py --model /path/to/qwen2/model --test\n</code></pre> <p>\ud83d\udd0d \u542f\u7528 <code>--test</code> \u9009\u9879\u5c06\u5173\u95ed Top-p\u3001Top-k \u548c Temperature \u91c7\u6837\uff0c\u5f3a\u5236 Hugging Face \u4f7f\u7528 ArgMax\uff08\u8d2a\u5a6a\u91c7\u6837\uff09\uff0c\u786e\u4fdd\u4e0e\u672c\u63a8\u7406\u5f15\u64ce\u7684\u91c7\u6837\u7ed3\u679c\u4e25\u683c\u4e00\u81f4\uff0c\u4fbf\u4e8e\u8c03\u8bd5\u4e0e\u9a8c\u8bc1\u3002</p>"},{"location":"#_6","title":"\ud83d\udd1c \u540e\u7eed\u5de5\u4f5c\uff08\u8bd5\u9a8c\u65b9\u5411\uff09","text":"<ol> <li>\u7b97\u5b50\u4f18\u5316\u4e0e\u6269\u5c55<ul> <li>\u8fdb\u4e00\u6b65\u4f18\u5316\u73b0\u6709\u7b97\u5b50\u6027\u80fd</li> <li>\u5b9e\u73b0\u65b0\u7b97\u5b50\uff08\u5982 LayerNorm\u3001Softmax \u7b49\uff09</li> </ul> </li> <li>\u91cf\u5316\u652f\u6301<ul> <li>\u5f00\u53d1 INT4/INT8/FP8 \u91cf\u5316\u7b97\u5b50</li> <li>\u652f\u6301\u7aef\u4fa7\u9ad8\u6548\u63a8\u7406</li> </ul> </li> </ol>"},{"location":"#_7","title":"\ud83d\udcda \u76f8\u5173\u8d44\u6e90","text":"<ul> <li>\u8bad\u7ec3\u8425\u8bfe\u7a0b\uff1a\u5927\u6a21\u578b\u63a8\u7406\u4e0e\u670d\u52a1\u7cfb\u7edf</li> <li>\u8bfe\u7a0b\u9879\u76ee\u4ed3\u5e93\uff1aInfiniTensor/llaisys</li> </ul>"},{"location":"ops/list/","title":"\u7b97\u5b50\u5217\u8868","text":"<p>\u76ee\u524d\u4ec5\u652f\u6301 <code>Float32</code>\u3001<code>Float16</code> \u548c <code>BFloat16</code> \u6570\u636e\u7c7b\u578b\u3002</p>"},{"location":"ops/list/#add","title":"Add\uff08\u52a0\u6cd5\uff09","text":"C++<pre><code>void add(tensor_t c, tensor_t a, tensor_t b);\n</code></pre> <p>\u5bf9\u5f20\u91cf <code>a</code> \u548c <code>b</code> \u6267\u884c\u9010\u5143\u7d20\u52a0\u6cd5\uff0c\u7ed3\u679c\u5b58\u5165\u5f20\u91cf <code>c</code>\u3002\u6240\u6709\u8f93\u5165\u4e0e\u8f93\u51fa\u5f20\u91cf\u5fc5\u987b\u5177\u6709\u76f8\u540c\u5f62\u72b6\u4e14\u4e3a\u8fde\u7eed\u5185\u5b58\u5e03\u5c40\u3002</p>"},{"location":"ops/list/#argmax","title":"Argmax\uff08\u53d6\u6700\u5927\u503c\u7d22\u5f15\uff09","text":"C++<pre><code>void argmax(tensor_t max_idx, tensor_t max_val, tensor_t vals);\n</code></pre> <p>\u5728 1D \u8f93\u5165\u5f20\u91cf <code>vals</code> \u4e2d\u67e5\u627e\u6700\u5927\u503c\u53ca\u5176\u5bf9\u5e94\u7d22\u5f15\u3002\u6700\u5927\u503c\u5199\u5165 <code>max_val</code>\uff0c\u5176\u7d22\u5f15\u5199\u5165 <code>max_idx</code>\u3002<code>max_val</code> \u4e0e <code>max_idx</code> \u5747\u4e3a\u5305\u542b\u5355\u4e2a\u5143\u7d20\u7684 1D \u5f20\u91cf\u3002\u8f93\u5165 <code>vals</code> \u5fc5\u987b\u662f 1D \u4e14\u8fde\u7eed\u7684\u5f20\u91cf\u3002</p>"},{"location":"ops/list/#embedding","title":"Embedding\uff08\u5d4c\u5165\u67e5\u627e\uff09","text":"C++<pre><code>void embedding(tensor_t out, tensor_t index, tensor_t weight);\n</code></pre> <p>\u6839\u636e 1D \u7684 <code>index</code> \u5411\u91cf\uff08\u6570\u636e\u7c7b\u578b\u4e3a <code>int64</code>\uff09\uff0c\u4ece 2D \u7684 <code>weight</code> \u77e9\u9635\u4e2d\u6309\u884c\u7d22\u5f15\u53d6\u51fa\u5bf9\u5e94\u884c\uff0c\u7ed3\u679c\u5199\u5165 2D \u8f93\u51fa\u5f20\u91cf <code>out</code>\u3002<code>weight</code> \u5fc5\u987b\u662f 2D \u8fde\u7eed\u5f20\u91cf\uff0c<code>index</code> \u5fc5\u987b\u662f 1D \u7684 <code>int64</code> \u5f20\u91cf\u3002</p>"},{"location":"ops/list/#linear","title":"Linear\uff08\u7ebf\u6027\u53d8\u6362\uff09","text":"C++<pre><code>void linear(tensor_t out, tensor_t in, tensor_t weight, tensor_t bias);\n</code></pre> \\[ Y = XW^T + b \\] <p>\u8ba1\u7b97\u7ebf\u6027\u53d8\u6362 \\(Y = XW^T + b\\)\uff0c\u5176\u4e2d\uff1a</p> <ul> <li><code>in</code> \u5373 \\(X\\)\uff0c\u4e3a 2D \u8fde\u7eed\u8f93\u5165\u5f20\u91cf\uff1b</li> <li><code>weight</code> \u5373 \\(W\\)\uff0c\u4e3a 2D \u8fde\u7eed\u6743\u91cd\u5f20\u91cf\uff08\u65e0\u9700\u9884\u5148\u8f6c\u7f6e\uff09\uff1b</li> <li><code>bias</code> \u5373 \\(b\\)\uff0c\u4e3a\u53ef\u9009\u7684 1D \u504f\u7f6e\u5f20\u91cf\uff08\u82e5\u672a\u63d0\u4f9b\uff0c\u5219\u4e0d\u52a0\u504f\u7f6e\uff09\uff1b</li> <li><code>out</code> \u5373 \\(Y\\)\uff0c\u4e3a 2D \u8fde\u7eed\u8f93\u51fa\u5f20\u91cf\u3002</li> </ul>"},{"location":"ops/list/#rms-normalization","title":"RMS Normalization\uff08\u5747\u65b9\u6839\u5f52\u4e00\u5316\uff09","text":"C++<pre><code>void rms_norm(tensor_t out, tensor_t in, tensor_t weight, float eps);\n</code></pre> <p>\u5bf9\u8f93\u5165\u5f20\u91cf <code>in</code> \u7684\u6bcf\u4e00\u884c\u6cbf\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\u8fdb\u884c RMS \u5f52\u4e00\u5316\uff0c\u516c\u5f0f\u4e3a\uff1a</p> \\[ Y_i = \\frac{W \\odot  X_i}{\\sqrt{\\frac{1}{d} \\sum_{j=1}^d X_{i,j}^2 + \\varepsilon}} \\] <p>\u5176\u4e2d\uff1a</p> <ul> <li><code>in</code> \u5373 \\(X\\)\uff0c\u4e3a 2D \u8fde\u7eed\u8f93\u5165\u5f20\u91cf\uff1b</li> <li><code>weight</code> \u5373 \\(W\\)\uff0c\u4e3a\u957f\u5ea6\u7b49\u4e8e\u8f93\u5165\u884c\u5bbd \\(d\\) \u7684 1D \u6743\u91cd\u5f20\u91cf\uff1b</li> <li><code>eps</code> \u5373 \\(\\varepsilon\\)\uff0c\u4e3a\u9632\u6b62\u9664\u96f6\u7684\u5c0f\u5e38\u6570\uff1b</li> <li><code>out</code> \u5373 \\(Y\\)\uff0c\u4e3a 2D \u8fde\u7eed\u8f93\u51fa\u5f20\u91cf\u3002</li> </ul>"},{"location":"ops/list/#rope","title":"RoPE\uff08\u65cb\u8f6c\u4f4d\u7f6e\u7f16\u7801\uff09","text":"<p>C++<pre><code>void rope(tensor_t out, tensor_t in, tensor_t pos_ids, float theta);\n</code></pre> \u4e3a\u8f93\u5165\u5f20\u91cf<code>in</code>\u7684\u6bcf\u4e2a\u5411\u91cf\uff08\u8fd9\u4e9b\u5411\u91cf\u4e0e pos_ids \u4e2d\u7684\u4f4d\u7f6e id \u76f8\u5bf9\u5e94\uff09\u8ba1\u7b97\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <p>\u8bbe \\(\\mathbf{x}_i = [\\mathbf{a}_i, \\mathbf{b}_i] \\in \\mathbb{R}^d\\) \u4e3a\u8f93\u5165\u5411\u91cf\uff0c \\(\\mathbf{y}_i = [\\mathbf{a}'_i, \\mathbf{b}'_i] \\in \\mathbb{R}^d\\) \u4e3a\u7d22\u5f15 \\(i\\) \u5904\u7684\u8f93\u51fa\u5411\u91cf\uff0c\u5176\u4e2d \\(\\mathbf{a}_i, \\mathbf{b}_i,\\mathbf{a}'_i, \\mathbf{b}'_i \\in \\mathbb{R}^{d/2}\\) \u3002</p> <p>\u8bbe \\(\\theta\\) \u4e3a\u56fa\u5b9a\u57fa\u6570\uff08\u4f8b\u5982 \\(\\theta = 10000\\)\uff09\uff0c \\(j = 0, 1, \\ldots, d/2 - 1\\)\u3002</p> <p>\u8bbe \\(p_i \\in \\mathbb{N}\\) \u662f\u8f93\u5165\u7d22\u5f15 \\(i\\) \u5904token\u7684\u4f4d\u7f6eid\u3002</p> <p>\u90a3\u4e48RoPE\u7684\u89d2\u5ea6\u4e3a \\(\\phi_{i,j} = \\frac{p_i}{\\theta^{2j/d}}\\)</p> <p>\u8f93\u51fa\u5411\u91cf \\(\\mathbf{y}_i = [\\mathbf{a}'_i, \\mathbf{b}'_i]\\) \u8ba1\u7b97\u5982\u4e0b\uff1a</p> \\[a_{i,j}' = a_{i,j} \\cos(\\phi_{i,j}) - b_{i,j} \\sin(\\phi_{i,j})\\] \\[b_{i,j}' = b_{i,j} \\cos(\\phi_{i,j}) + a_{i,j} \\sin(\\phi_{i,j})\\] <ul> <li><code>out</code>\uff1a\u7f16\u7801\u540e\u7684\u67e5\u8be2\uff08Q\uff09\u6216\u952e\uff08K\uff09\u5f20\u91cf\u3002\u5f62\u72b6\u5e94\u8be5\u662f <code>[seqlen, nhead, d]</code> \u6216 <code>[seqlen, nkvhead, d]</code>\u3002\u6682\u65f6\u53ef\u4ee5\u5047\u8bbe\u5f20\u91cf\u662f\u8fde\u7eed\u7684\u3002</li> <li><code>in</code>\uff1a\u539f\u59cb\u67e5\u8be2\uff08Q\uff09\u6216\u952e\uff08K\uff09\u5f20\u91cf\u3002\u5f62\u72b6\u5e94\u8be5\u662f <code>[seqlen, nhead, d]</code> \u6216 <code>[seqlen, nkvhead, d]</code>\u3002\u6682\u65f6\u53ef\u4ee5\u5047\u8bbe\u5f20\u91cf\u662f\u8fde\u7eed\u7684\u3002</li> <li><code>pos_ids</code>\uff1a\u8f93\u5165\u5e8f\u5217\u4e2d\u6bcf\u4e2atoken\u7684\u4f4d\u7f6eid\uff08\u6574\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u7684\u7d22\u5f15\uff09\u3002\u5f62\u72b6\u5e94\u8be5\u662f <code>[seqlen,]</code>\uff0cdtype\u5e94\u8be5\u662f<code>int64</code>\u3002</li> <li><code>theta</code>\uff1a\u9891\u7387\u5411\u91cf\u7684\u57fa\u503c\uff08\u5982 10000\uff09\u3002</li> </ul>"},{"location":"ops/list/#self-attention","title":"Self-Attention\uff08\u81ea\u6ce8\u610f\u529b\uff09","text":"<p>C++<pre><code>void self_attention(tensor_t attn_val, tensor_t q, tensor_t k, tensor_t v, float scale);\n</code></pre> \u4e3a\u67e5\u8be2\u5f20\u91cf<code>q</code>\u3001\u952e\u5f20\u91cf<code>k</code>\u548c\u503c\u5f20\u91cf<code>v</code>\u8ba1\u7b97\u5e26\u56e0\u679c\u63a9\u7801\u7684\u81ea\u6ce8\u610f\u529b\u3002</p> \\[ A = Q K^\\top * scale \\\\ \\] \\[ Y = \\mathrm{causalsoftmax}(A) \\cdot V \\\\ \\] <ul> <li><code>attn_val</code>\uff1a\u7ed3\u679c\u6ce8\u610f\u529b\u503c\u5f20\u91cf\u3002\u5f62\u72b6\u5e94\u8be5\u662f<code>[seqlen, nhead, dv]</code>\u3002\u6682\u65f6\u53ef\u4ee5\u5047\u8bbe\u5f20\u91cf\u662f\u8fde\u7eed\u7684\u3002</li> <li><code>q</code>\uff1a\u67e5\u8be2\u5f20\u91cf\u3002\u5f62\u72b6\u5e94\u8be5\u662f <code>[seqlen, nhead, d]</code>\u3002\u6682\u65f6\u53ef\u4ee5\u5047\u8bbe\u5f20\u91cf\u662f\u8fde\u7eed\u7684\u3002</li> <li><code>k</code>\uff1a\u952e\u5f20\u91cf\u3002\u5f62\u72b6\u5e94\u8be5\u662f <code>[total_len, nkvhead, d]</code>\u3002\u6682\u65f6\u53ef\u4ee5\u5047\u8bbe\u5f20\u91cf\u662f\u8fde\u7eed\u7684\u3002</li> <li><code>v</code>\uff1a\u503c\u5f20\u91cf\u3002\u5f62\u72b6\u5e94\u8be5\u662f <code>[total_len, nkvhead, dv]</code>\u3002\u6682\u65f6\u53ef\u4ee5\u5047\u8bbe\u5f20\u91cf\u662f\u8fde\u7eed\u7684\u3002</li> <li><code>scale</code>\uff1a\u7f29\u653e\u56e0\u5b50\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53d6\u503c\u4e3a \\(\\frac{1}{\\sqrt{d}}\\) \u3002</li> </ul> <p><code>total_len</code> = <code>past_len</code> + <code>seq_len</code>\uff0c\u8ba1\u7b97\u5f53\u524d\u6279\u6b21<code>seq_len</code>\u4e2atoken\u7684attention\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u5230\u524d\u9762\u7684<code>past_len</code>\u4e2atoken\u4ee5\u53ca\u5f53\u524d\u6279\u6b21\u7684<code>1..seq_len</code>\u4e2atoken\u7684\u952e\uff08K\uff09,\u6b64\u5904\u9700\u8981\u6ce8\u610f kvcache \u7684\u62fc\u63a5\u3002</p>"},{"location":"ops/list/#swigluswish-gated-linear-unit","title":"SwiGLU\uff08Swish-Gated Linear Unit\uff09","text":"C++<pre><code>void swiglu(tensor_t out, tensor_t gate, tensor_t up);\n</code></pre> <p>\u8ba1\u7b97 SwiGLU \u6fc0\u6d3b\u51fd\u6570\uff1a</p> \\[ out_{i} = up_{i} \\odot \\frac { gate_{i}}{1 + e^{-gate_{i}}} \\] <p>\\(e^{\u2212gate_i}\\) \u8868\u793a\u5bf9 \\(gate_i\\) \u5411\u91cf\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5355\u72ec\u8fdb\u884c\u6307\u6570\u8fd0\u7b97\u3002</p> <p>\u5176\u4e2d <code>gate</code>\u3001<code>up</code> \u548c <code>out</code> \u5747\u4e3a\u5f62\u72b6\u76f8\u540c\u7684 2D \u8fde\u7eed\u5f20\u91cf\uff0c\u5f62\u72b6\u4e3a <code>[seqlen, intermediate_size]</code>\u3002</p>"},{"location":"ops/list/#rearrange","title":"Rearrange\uff08\u91cd\u6392\uff09","text":"C++<pre><code>void rearrange(tensor_t out, tensor_t in);\n</code></pre> <p>\u5c06\u6570\u636e\u4ece\u8f93\u5165\u5f20\u91cf <code>in</code> \u590d\u5236\u5230\u8f93\u51fa\u5f20\u91cf <code>out</code>\uff0c\u4e24\u8005\u5177\u6709\u76f8\u540c\u903b\u8f91\u5f62\u72b6\u4f46\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u5185\u5b58\u6b65\u957f\uff08strides\uff09\u3002\u8be5\u7b97\u5b50\u53ef\u7528\u4e8e\u5b9e\u73b0\u5f20\u91cf\u7684 <code>contiguous()</code> \u529f\u80fd\uff0c\u786e\u4fdd\u8f93\u51fa\u4e3a\u8fde\u7eed\u5185\u5b58\u5e03\u5c40\u3002</p>"}]}